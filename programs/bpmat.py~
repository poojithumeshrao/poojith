import random
import pdb
import math

nip = 2
inp = [[0,0,1],[0,1,1],[1,1,1],[1,0,0]]

def sigmoid(temp):
    #print temp
    return 1/float((1+math.exp(-temp)))
class hidden:
    def __init__(self,i,n,o):
        self.no_nodes = n
        self.no_input = i
        self.no_output = o
        self.h = [0 for a in range(n)]
        self.ho = [0 for a in range(n)]
        self.inwght = [(random.uniform(-0.5,0.5)) for a in range(n*i)]
        self.bias = 1
        self.delin = [0 for a in range(n*i)]
        self.deror = [0 for a in range(n)]

layer = []
layer.append(hidden(0,2,3))
layer.append(hidden(2,3,1))
layer.append(hidden(3,1,0))

layer[0].h = [0 for i in range(2)]
layer[0].h = [0 for i in range(2)]
#layer[2].inwght = [0.3,0.2]
#layer[1].inwght = [0.1,0.2,0.3,0.4]
error = [0 for i in range(len(inp))]
count = 0
ercheck = 1
